// Zed keymap
//
// For information on binding keys, see the Zed
// documentation: https://zed.dev/docs/key-bindings
//
// To see the default key bindings run `zed: open default keymap`
// from the command palette.
[
  {
    "context": "Workspace",
    "bindings": {
      "ctrl-t": "terminal_panel::ToggleFocus",
      "space |": "workspace::ToggleRightDock"
    }
  },
  {
    "context": "Editor",
    "bindings": {
      // "j k": ["workspace::SendKeystrokes", "escape"]
    }
  },
  {
    "context": "Editor && vim_mode == normal",
    "bindings": {
      "space space": "file_finder::Toggle",
      "ctrl-h": ["workspace::ActivatePaneInDirection", "Left"],
      "ctrl-l": ["workspace::ActivatePaneInDirection", "Right"],
      "ctrl-k": ["workspace::ActivatePaneInDirection", "Up"],
      "ctrl-j": ["workspace::ActivatePaneInDirection", "Down"],
      "space g g": ["task::Spawn", { "task_name": "Lazygit" }]
      // "space g g": ["workspace::SendKeystrokes", "alt-shift-t enter"]
    }
  },
  {
    "context": "Editor && vim_mode == insert",
    "bindings": {
      "ctrl-f": "editor::AcceptInlineCompletion"
    }
  },
  {
    "context": "VimControl && !menu",
    "bindings": {
      // This will work both in normal and visual mode
      "shift-k": "editor::Hover",
      // LSP
      "space c a": "editor::ToggleCodeActions",
      "space c r": "editor::Rename",
      "space v": "editor::GoToDefinitionSplit",
      "space g t": "editor::GoToTypeDefinition",
      "space s t": "pane::DeploySearch",

      "space x x": "diagnostics::Deploy",
      "space o": "tab_switcher::Toggle",
      "ctrl-n": "workspace::ToggleLeftDock",
      "space p": "outline::Toggle",
      // + Buffers
      // Switch between buffers
      "shift-h": "pane::ActivatePrevItem",
      "shift-l": "pane::ActivateNextItem",
      // Close buffer
      "space b d": "pane::CloseActiveItem",

      //  Panes
      "space |": "pane::SplitLeft",
      "space -": "pane::SplitDown",
      "space w d": "pane::CloseActiveItem",
      // AI
      "space a a": "assistant::InlineAssist",
      "space a q": "assistant::QuoteSelection",
      "space a c": "assistant::ToggleFocus",
      "space a p": "assistant::InsertActivePrompt",
      "space q": "workspace::ToggleRightDock"
      // "ctrl-s": "assistant::ConfirmCommand"
    }
  },
  {
    "context": "Editor && vim_mode == visual",
    "bindings": {
      "alt-k": "editor::MoveLineUp",
      "alt-j": "editor::MoveLineDown"
    }
  },
  {
    "context": "Terminal",
    "bindings": {
      "ctrl-t": "workspace::ToggleBottomDock",
      "ctrl-a": "workspace::NewTerminal",
      "ctrl-d": "pane::CloseActiveItem"
    }
  },
  {
    "context": "ProjectPanel && not_editing",
    "bindings": {
      "a": "project_panel::NewFile",
      "d": "project_panel::Delete",
      "r": "project_panel::Rename",
      "ctrl-n": "workspace::ToggleLeftDock",
      "space q": "workspace::ToggleRightDock"
      // "ctrl-s: "assistant::Assist"
    }
  }
]
